    // This is the text editor interface. 
    // Anything you type or change here will be seen by the other person in real time.
    
    /*
      
    Cashiers Problem (~45 min)
      
    Given a list of transactions, How can we calculate the frequency
    counts of all possible item-sets?
      
    For example,
      
    [INPUT] list of transactions
    | -- | -----------------------------|
    | ID | Purchased items              |
    | -- | -----------------------------|
    | 1  | apple, banana, lemon         |
    | 2  | banana, berry, lemon, orange |
    | 3  | banana, berry, lemon         |
    | -- | -----------------------------|
      
      
    [OUTPUT] frequency counts of all possible item-sets. Note: some
    outputs are omitted for brevity.
    | ---------------------------- | --------- |
    | Itemset                      | Frequency |
    | ---------------------------- | --------- |
    | apple, banana                | 1         |
    | apple, lemon                 | 1         |
    | banana, berry                | 2         |
    | banana, lemon                | 3         |
    | ...                                      |
    | apple, banana, lemon         | 1         |
    | banana, berry, lemon         | 2         |
    | ...                                      |
    | banana, berry, lemon, orange | 1         |
    | ...                                      |
    | ---------------------------- | --------- |
    */  
    
    using System;
    using System.Collections;
    using System.Collections.Generic;
      
    public class Cashier {
        public static void Main(string[] args){
            
            //var input = new string[] { {"apple", "banana", "lemon"},  {"banana", "berry", "lemon", "orange"}, { "banana", "berry", "lemon"} };
            var list = new List<string>();
            list.Add("apple, banana, lemon");
            
            var dict = Calculate(list.ToArray());
            
            foreach(KeyValuePair<string,int> item in dict)
            {
                Console.WriteLine("{0} - {1}", item.Key, item.Value);
            }
        } 
        
        private static Dictionary<string, int> Calculate(string[] input)
        {
            if(input == null || input.Length == 0)
                return null;
                
            Dictionary<string, int> dictionary = new Dictionary<string, int>();
            string result = string.Empty;
            
            for(int i = 0; i < input.Length; i++)
            {
                 // apple|banana|lemon
                string[] currLine = input[i].Split(new char[] { ','});
                
                Combine(currLine, string.Empty, 0, ref result, ref dictionary);
            }
            
            return dictionary;
        }
        
        private static void Combine(string[] input, string output, int current, ref string result, ref Dictionary<string, int> dictionary)
        {
            for(int i = current; i < input.Length; i++)
            {
                output += "-" + input[i];               //apple-banana-lemon
                var tmp = result;
                result += "-" + output;                 //apple-banana-lemon
                
                if(dictionary.ContainsKey(result))
                {
                    dictionary[result]++; 
                }
                else
                {
                    dictionary.Add(result, 1);
                }
                
                Combine(input, output, i + 1, ref result, ref dictionary);
                
                string[] currLine = input[i].Split(new char[] { '-'});
               for(int i = 0; i < )
                
            }
        }
        
    }

	
	http://www.geeksforgeeks.org/rotate-matrix-elements/